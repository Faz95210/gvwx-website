<?php


namespace frontend\controllers;

use common\models\StripeDiscount;
use common\models\StripeDiscountCode;
use common\models\StripePlan;
use common\models\StripeUserSubscription;
use common\models\User;
use common\models\StripeUser;
use Stripe\Coupon;
use Stripe\Customer;
use Stripe\Plan;
use Stripe\Product;
use Stripe\Stripe;
use Stripe\Subscription;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Controller;

class StripeController extends Controller {

    /**
     * {@inheritdoc}
     */
    public function behaviors() {
        Stripe::setApiKey(\Yii::$app->params['stripe.api_key']);

        return [
            'access' => [
                'class' => AccessControl::className(),
                //'only' => ['logout', 'signup'],
                'rules' => [
                    [
                        'actions' => ['cancelsubscription', 'subscribe', 'setdiscount', 'savecard', 'init', 'changesubscription'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                ],
            ],
        ];
    }

    public function afterAction($action, $result) {
        if (isset($_REQUEST["destination"])) {
            header("Location: {$_REQUEST["destination"]}");
        } else if (isset($_SERVER["HTTP_REFERER"])) {
            header("Location: {$_SERVER["HTTP_REFERER"]}");
        } else {
            return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
        }
        exit;
    }

    /**
     * {@inheritdoc}
     */
    public function actions() {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    public function actionCancelsubscription() {
        $stripe_subscription_model = StripeUserSubscription::find()->where(['id' => \Yii::$app->request->post('subscription_id')])->one();
        $this->cancelSubscription($stripe_subscription_model->stripe_subscription_token);
    }

    public function actionInit() {
        //Create Product
        $product = Product::create([
            'name' => 'Abonnement',
            'type' => 'service',
        ]);

        //Create Plan
        $monthlyPlan = Plan::create([
            "nickname" => "Standard Monthly",
            "product" => $product->id,
            "amount" => 2000,
            "currency" => "eur",
            "interval" => "month",
            "usage_type" => "licensed",
        ]);
        $stripePlan = new StripePlan(['label' => 'Monthly', 'price' => 2000, 'currency' => 'EUR', 'stripe_token' => $monthlyPlan->id]);
        $stripePlan->save();

        $yearPlan = Plan::create([
            "nickname" => "Standard Yearly",
            "product" => $product->id,
            "amount" => 1000,
            "currency" => "eur",
            "interval" => "year",
            "usage_type" => "licensed",
        ]);
        $stripePlan = new StripePlan(['label' => 'Yearly', 'price' => 1000, 'currency' => 'EUR', 'stripe_token' => $yearPlan->id]);
        $stripePlan->save();
    }

    public function actionSavecard() {
        $stripeToken = \Yii::$app->request->post('stripeToken');
        if ($stripeToken == null) {
            return ['error' => "Stripetoken didn't go through", 'status' => -1];
        }
        $customer_token = $this->getCustomerToken();
        if ($customer_token === -1) return json_encode(["value" => "", 'error' => "Couldn't find customer token", 'status' => "-1"]);
        $card_token = $this->createCard($customer_token, $stripeToken);
        $userToStripe = StripeUser::find()->where(['user_id' => \Yii::$app->user->getId()])->one();
        $userToStripe->stripe_card_token = $card_token;
        $userToStripe->update();
    }

    public function actionSetdiscount() {
        $subscription_id = \Yii::$app->request->post('subscription_id');
        $code = \Yii::$app->request->post('code');

        $subscription_model = StripeUserSubscription::find()->where(['id' => $subscription_id])->one();
        $discount_model = StripeDiscountCode::find()->where(['discount_code' => $code])->select(['stripe_discount_id'])->one();

        if ($subscription_model != null && $discount_model != null) {
            $this->handleDiscountCode($subscription_model, $code);
        } else {
            return $discount_model == null ? -2 : -1;
        }
    }

    public function actionSubscribe() {
        $stripeUser = StripeUser::find()->where(['user_id' => \Yii::$app->user->id])->one();
        if ($stripeUser == null) {
            return -1;
        }

        $planId = \Yii::$app->request->post('stripe_plan_id');
        $device_id = \Yii::$app->request->post('device_id');

        $stripeSubscription = null;
        if (!$this->alreadySubscribed($stripeUser->id, $device_id, $planId)) {
            $stripeSubscription = StripeUserSubscription::find()
                ->where(['stripe_user_id' => $stripeUser->id])
                ->andWhere(['device_id' => $device_id])->one();

            if ($stripeSubscription != null) {
                echo "Canceling subscription";
                $this->cancelSubscription($stripeSubscription);
            }

            $this->subscribe($stripeUser->stripe_user_token, $stripeUser->id, $device_id, $planId);
        }

        $code = \Yii::$app->request->post('code');
        if ($code != null) {
            if ($stripeSubscription == null) {
                $stripeSubscription = StripeUserSubscription::find()
                    ->where(['stripe_user_id' => $stripeUser->id])
                    ->andWhere(['device_id' => $device_id])->one();
            }
            $this->handleDiscountCode($stripeSubscription, $code);
        }
        return 1;
    }


    private function alreadySubscribed($id, $device_id, $planId) {
        $subscription = StripeUserSubscription::find()->where(['stripe_user_id' => $id, 'stripe_plan_id' => $planId, 'device_id' => $device_id])->one();
        return $subscription != null;
    }


    private function cancelDiscount($subscriptionModel) {
        $subscription = Subscription::retrieve($subscriptionModel->stripe_subscription_token);
        $subscription->deleteDiscount();
    }


    private function cancelSubscription($subscriptionToken) {
        $subscription = Subscription::retrieve($subscriptionToken);
        $subscription->delete();
        $dbSubscription = StripeUserSubscription::find()->where(['stripe_subscription_token' => $subscriptionToken])->one();
        $dbSubscription->delete();
    }

    private function createCard($customer_token, $token) {
        $card = Customer::createSource($customer_token, [
            'source' => $token
        ]);
        return $card['id'];
    }

    private function createDiscount($discount_code) {
        try {
            $coupon = Coupon::create([
                (strpos($discount_code->discount, '%') !== false ? 'percent_off' : 'amount_off') => str_replace('%', '', $discount_code->discount),
                'duration' => 'forever',
                'currency' => 'eur'
            ]);
            $stripeDiscount = new StripeDiscount([
                'discount' => $discount_code->discount,
                'stripe_discount_token' => $coupon->id
            ]);
            $stripeDiscount->save();
            $discount_code->stripe_discount_id = $stripeDiscount->id;
            $discount_code->save(false);
            return $coupon;
        } catch (\Exception $ex) {
            return null;
        }
    }

    private function getCustomerToken() {
        $userToStripe = StripeUser::find()->where(['user_id' => \Yii::$app->user->getId()])->one();
        $user = User::find()->where(['id' => \Yii::$app->user->getId()])->one();
        if ($userToStripe == null) {
            $customer = Customer::create([
                'description' => 'Customer for ' . $user->email,
                'email' => $user->email,
                'name' => $user->firstname . ' ' . $user->name,
            ]);
            $userToStripe = new StripeUser(['user_id' => \Yii::$app->user->getId(), 'stripe_user_token' => $customer->id]);
            $userToStripe->save();
            return $customer->id;
        } else if ($userToStripe->stripe_user_token != null) {
            return $userToStripe->stripe_user_token;
        }
        return -1;
    }

    private function handleDiscountCode($stripeSubscription, $code) {
        $discountCode = StripeDiscountCode::find()->where(['discount_code' => $code])->one();

        if ($discountCode == null)
            return -1;

        //Discount doesn't yet exists create it
        if ($discountCode->stripe_discount_id == null) {
            $this->createDiscount($discountCode);
        }
        //Subscription already has a discount cancel it
        if ($stripeSubscription->stripe_discount_code_id != null) {
            $this->cancelDiscount($stripeSubscription);
        }
        $this->linkDiscount($stripeSubscription->id, $discountCode->id);
    }

    public function jsonResponse($code, $data = '') {
        $response = array();
        $message = $this->getStatusCodeMessage($code);
        if (!empty($message)) {
            //$response = array("status" => false, "message" => $message, "data" => $data, "code" => $code);
            $response = $data;
        }
        $this->setHeader($code);

        echo json_encode($response);
        die;
    }


    private function linkDiscount($subscription_id, $discount_code_id) {
        $stripe_user_subscription_model = StripeUserSubscription::find()->where(['id' => $subscription_id])->one();
        $stripe_user_subscription_model->stripe_discount_code_id = $discount_code_id;
        $stripe_user_subscription_model->update();
        $stripe_discount_code_model = StripeDiscountCode::find()->where(['id' => $discount_code_id])->one();

        $stripe_discount_model = StripeDiscount::find()->where(['id' => $stripe_discount_code_model->stripe_discount_id])->one();

        Subscription::update(
            $stripe_user_subscription_model->stripe_subscription_token,
            [
                'coupon' => $stripe_discount_model->stripe_discount_token
            ]
        );
    }

    private function subscribe($customer_token, $stripe_user_id, $device_id, $planId) {
        $plan = StripePlan::find()->where(['id' => $planId])->one();
        $subscription = Subscription::create([
            "customer" => $customer_token,
            "items" => [
                [
                    "plan" => $plan->stripe_token,
                    "quantity" => 1,
                ]
            ],
        ]);
        $stripeSubscription = new StripeUserSubscription([
            'stripe_user_id' => $stripe_user_id,
            'device_id' => $device_id,
            'stripe_plan_id' => $planId,
            'stripe_subscription_token' => $subscription->id
        ]);
        $stripeSubscription->save();
    }

}