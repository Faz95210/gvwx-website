<?php
// your_app/votewidget/VoteWidget.php

namespace common\widgets\MapWidget;

require __DIR__ . '/../../../vendor/autoload.php';

use Aws\S3\Exception\S3Exception;
use Aws\S3\S3Client;
use common\models\RtTracking;
use Yii;
use yii\base\Widget;

class MapWidget extends Widget {
    public $model;

    public function __construct($job = null, $param = null) {
        parent::__construct([]);

        $this->view->params['job'] = $job;
        switch ($job) {
            case "kml" :
                $this->view->params['kml'] = $this->getFileFromS3($param);
                break;
            case "tracking" :
                $this->view->params['tracking'] = RtTracking::findLatestTrackingForUser();
                $this->view->params['last_tracking'] = $this->view->params['tracking'][count($this->view->params['tracking']) - 1]->id;
                break;
            default:
                break;
        }
    }

    public function init() {
        parent::init();
    }

    function getFileFromS3($key) {
        if (!$key)
            return null;
        $params = [
            'version' => 'latest',
            'region' => Yii::$app->params['s3.region'],
            'credentials' => [
                'key' => Yii::$app->params['s3.key'],
                'secret' => Yii::$app->params['s3.secret'],
            ],
            'bucket' => Yii::$app->params['s3.bucket'],
        ];
        $s3 = S3Client::factory($params);
        if (!$s3->doesBucketExist($params['bucket'])) {
            $this->view->params['error'] = "Bucket doesn't exist";
            return "";
        }
        try {
            $obj = $s3->getObject(['Bucket' => $params['bucket'], 'Key' => $key]);
            if (isset($obj['Body'])) {
                return $obj['Body'];
            } else {
                $this->view->params['error'] = "Body Error";
            }
        } catch (\Exception $ex) {
//            echo $ex;
//            exit;
            $this->view->params['error'] = "KML File not found";
            return "";
        }
        return "";
    }

    public function run() {
        // Register AssetBundle
        $bundle = MapWidgetAsset::register($this->getView());
        $this->view->params['btoa'] = base64_encode(Yii::$app->user->getIdentity()->getId() . ':' . Yii::$app->user->getIdentity()->getAuthKey());
        return $this->render('_map');
    }

    public static function end() {
        return parent::end(); // TODO: Change the autogenerated stub
    }

}
